plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

repositories {
    mavenCentral()
}


def javafxVersion = '21'
def mainClassName = 'edu.knox.cder.testy.Main'
def archiveBaseName = 'TMTF'


// Custom configurations for macOS and Windows
// configurations {
//     mac
//     mac_aarch64
//     windows
// }
configurations {
    mac {
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
            attribute(OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, objects.named(OperatingSystemFamily, "macos"))
            attribute(MachineArchitecture.ARCHITECTURE_ATTRIBUTE, objects.named(MachineArchitecture, "x86-64"))
        }
    }
    mac_aarch64 {
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
            attribute(OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, objects.named(OperatingSystemFamily, "macos"))
            attribute(MachineArchitecture.ARCHITECTURE_ATTRIBUTE, objects.named(MachineArchitecture, "aarch64"))
        }
    }
    windows {
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
            attribute(OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, objects.named(OperatingSystemFamily, "windows"))
            attribute(MachineArchitecture.ARCHITECTURE_ATTRIBUTE, objects.named(MachineArchitecture, "x86-64"))
        }
    }
    linux {
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
            attribute(OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, objects.named(OperatingSystemFamily, "linux"))
            attribute(MachineArchitecture.ARCHITECTURE_ATTRIBUTE, objects.named(MachineArchitecture, "x86-64"))
        }
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
    
    implementation group: 'org.ow2.asm', name: 'asm', version: '9.6'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
    implementation 'com.google.guava:guava:31.1-jre'

    implementation "org.openjfx:javafx-controls:${javafxVersion}"
    implementation "org.openjfx:javafx-fxml:${javafxVersion}"
    implementation "org.openjfx:javafx-base:${javafxVersion}"
    implementation "org.openjfx:javafx-graphics:${javafxVersion}"

    // x86 macOS-specific JavaFX dependencies
    mac "org.openjfx:javafx-controls:$javafxVersion:mac"
    mac "org.openjfx:javafx-fxml:$javafxVersion:mac"
    mac "org.openjfx:javafx-base:$javafxVersion:mac"
    mac "org.openjfx:javafx-graphics:$javafxVersion:mac"

    // ARM macOS-specific JavaFX dependencies
    mac_aarch64 "org.openjfx:javafx-controls:$javafxVersion:mac-aarch64"
    mac_aarch64 "org.openjfx:javafx-fxml:$javafxVersion:mac-aarch64"
    mac_aarch64 "org.openjfx:javafx-base:$javafxVersion:mac-aarch64"
    mac_aarch64 "org.openjfx:javafx-graphics:$javafxVersion:mac-aarch64"

    // Windows-specific JavaFX dependencies
    windows "org.openjfx:javafx-controls:$javafxVersion:win"
    windows "org.openjfx:javafx-fxml:$javafxVersion:win"
    windows "org.openjfx:javafx-base:$javafxVersion:win"
    windows "org.openjfx:javafx-graphics:$javafxVersion:win"
}

// common jar logic
def createJarTask = { taskName, configName, classifierName ->
    tasks.register(taskName, Jar) {
        archiveClassifier.set(classifierName)
        manifest {
            attributes 'Main-Class': mainClassName
        }
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        from {
            configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        }
        from {
            configurations[configName].collect { it.isDirectory() ? it : zipTree(it) }
        }
        with jar
    }
}

// Create platform-specific JAR tasks
createJarTask('jarMacARM', 'mac_aarch64', 'mac_aarch64')
createJarTask('jarMacX86', 'mac', 'mac')
createJarTask('jarWindows', 'windows', 'windows')


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += [
        '--module-path', configurations.mac.asPath + ':' + configurations.mac_aarch64.asPath  + ':' + configurations.windows.asPath,
        '--add-modules', 'javafx.controls,javafx.fxml,javafx.graphics,javafx.base'
    ]
}

build.dependsOn jarMacARM, jarMacX86, jarWindows
